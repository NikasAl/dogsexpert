package ru.electronikas.dogexpert.parser;

import javax.imageio.IIOException;
import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;

/**
 * Created by nikas on 11/30/16.
 *
 * This generates Breeds.java class which contains breeds descriptions
 * and mapping: neural net output number -> breed
 */
public class BreedEnumGenerator {

    public static void main(String[] args) throws IOException {
        DogsHtmlParser parser = new DogsHtmlParser();
        List<BreedRef> breedRefs = parser.getBreeds();
        parser.feelBreeds(breedRefs);

        String breedEnum = generateBreedsEnumString(breedRefs);
        System.out.println(breedEnum);

        String breedDescription = generateBreedsDescriptionString(breedRefs);
        System.out.println(breedDescription);

        saveBreedPhotos(breedRefs);
    }

    private static String generateBreedsDescriptionString(List<BreedRef> breedRefs) {
        String s = "\n\n#dogexpert_ru.properties\n";
        for(BreedRef breedRef : breedRefs) {
            s += breedRef.identity.replaceAll("-","_") + "=" + breedRef.description + "\n";
        }
        return s;
    }

    private static void saveBreedPhotos(List<BreedRef> breedRefs) throws IOException {
        File breedsDir = new File("./data/breeds");
        if(!breedsDir.exists()) breedsDir.mkdir();

        for(BreedRef breedRef : breedRefs) {
            File dir = new File("./data/breeds/" + breedRef.identity.replaceAll("-","_"));
            dir.mkdir();
//            saveImages(breedRef.imgs, dir);
            if(breedRef.imgs.size()>0)
                saveImage(dir, 0, (RenderedImage) breedRef.imgs.get(0));
        }
    }

    private static void saveImages(List<Image> imgs, File dir) throws IOException {
        int count = dir.listFiles().length;
        for(Image dogImg : imgs) {
            saveImage(dir, count++, (RenderedImage) dogImg);
        }
    }

    private static void saveImage(File dir, int count, RenderedImage dogImg) throws IOException {
        String imgPath = dir.getPath() + "/" + count + ".jpg";
        try {
            ImageIO.write(dogImg, "jpg", new File(imgPath));
        } catch (IIOException ex) {
            ex.printStackTrace();
        }
    }


    private static String generateBreedsEnumString(List<BreedRef> breedRefs) {
        String text = generateHead();
        text += generateBreeds(breedRefs);
        text += generateEnd();
        return text;
    }

    private static String generateBreeds(List<BreedRef> breedRefs) {
        String text = "\n";
        for(BreedRef breedRef : breedRefs) {
            text += breedRef.identity.replaceAll("-","_") + ",\n";
        }

        return text;
    }

    private static String generateHead() {
        return
                "package ru.electronikas.dogsexpert.neural;\n" +
                "\n" +
                "/**\n" +
                " * AutoGenerated by BreedEnumGenerator.\n" +
                " */\n" +
                "public enum Breeds {";
    }

    private static String generateEnd() {
        return "    ;\n" +
                "\n" +
                "    public String getDescription() {\n" +
                "       return Assets.bdl().get(this.name());\n" +
                "    }" +
                "\n" +
                "    public String getImagePath() {\n" +
                "        return \"data/\" + this.name() + \"/1.jpg\";\n" +
                "    }\n" +
                "\n" +
                "}\n";
    }

}
